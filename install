#!/usr/bin/env python

from __future__ import unicode_literals
import argparse, logging, os, pkg_resources


DEFAULT_PKG_DIRS = ['base']
logger = logging.getLogger('install')


def parse_args():
    parser = argparse.ArgumentParser(description='Symlink dotfiles into place')
    parser.add_argument('pkg_dir', nargs='*',
        help='Name of a directory to symlink')
    parser.add_argument('-v', '--verbose', action='store_true',
        help='Enable verbose debug loggin')
    return parser.parse_args()


def main():
    args = parse_args()
    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO,
        format='%(levelname)s:%(message)s')
    try:
        home_dir = os.environ['HOME']
    except KeyError:
        logger.error("'HOME' environment variable is not set")
        raise SystemExit(2)
    logger.debug("home_dir=%s", home_dir)

    try:
        script_dir = pkg_resources.resource_filename(__name__, '')
        script_dir = os.path.abspath(script_dir or '.')
    except:
        logger.exception("Unable to determine script directory")
        raise SystemExit(2)
    logger.debug("script_dir=%s", script_dir)

    pkg_dirs = args.pkg_dir if args.pkg_dir else DEFAULT_PKG_DIRS
    logger.debug("pkg_dirs=%s", pkg_dirs)

    try:
        for pkg_dir in pkg_dirs:
            symlink_dir(os.path.join(script_dir, pkg_dir), home_dir)
    except OSError as e:
        logger.error(e.strerror)
        raise SystemExit(3)
    except Exception as e:
        logger.error(e.message)
        raise SystemExit(3)
    logger.info("Done!")


def safe_mkdir(path):
    logger.debug("mkdir(%s)", path)
    try:
        path_exists = os.path.lexists(path)
        if path_exists and not os.path.isdir(path):
            raise RuntimeError('Not overwriting existing file')
        elif not path_exists:
            logger.info("MKDIR %s", path)
            os.mkdir(path)
    except Exception as e:
        raise RuntimeError("Could not create directory '{}': {}".format(
            path, e.message))


def safe_symlink(src, dest):
    """Creates a symlink named `dest` that points to `src`"""
    logger.debug("symlink(src=%s, dest=%s)", src, dest)
    try:
        dest_path_exists = os.path.lexists(dest)
        if dest_path_exists and not os.path.islink(dest):
            raise RuntimeError('Not overwriting existing file')
        elif dest_path_exists and os.readlink(dest) == src:
            return  # Symlink already exists
        elif dest_path_exists:
            logger.info("RM %s", dest)
            os.remove(dest)  # Need to re-create the symlink
        logger.info("LN %s -> %s", src, dest)
        os.symlink(src, dest)
    except Exception as e:
        raise RuntimeError("Could not create symlink '{}': {}".format(
            dest, e.message))


def symlink_dir(source_dir, dest_dir):
    for fname in os.listdir(source_dir):
        src_path = os.path.join(source_dir, fname)
        dest_path = os.path.join(dest_dir, fname)
        if os.path.isdir(src_path):
            safe_mkdir(dest_path)
            symlink_dir(src_path, dest_path)
        else:
            safe_symlink(src_path, dest_path)


if __name__ == '__main__':
    main()


# vim:set ts=4 sw=4 expandtab:
