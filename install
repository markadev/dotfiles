#!/usr/bin/env python3

from __future__ import unicode_literals
import argparse, logging, os, pkg_resources, sys


logger = logging.getLogger('install')


def parse_args():
    parser = argparse.ArgumentParser(description='Symlink dotfiles into place')
    parser.add_argument('role', nargs='+',
        help='Name of a directory to symlink')
    parser.add_argument('-v', '--verbose', action='store_true',
        help='Enable verbose debug logging')
    return parser.parse_args()


def main():
    args = parse_args()
    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO,
        format='%(levelname)s:%(message)s')
    try:
        home_dir = os.environ['HOME'].rstrip('/')
    except KeyError:
        logger.error("'HOME' environment variable is not set")
        sys.exit(2)
    logger.debug("home_dir=%s", home_dir)

    try:
        dotfile_basepath = pkg_resources.resource_filename(__name__, '')
        dotfile_basepath = os.path.abspath(dotfile_basepath or '.')
    except:
        logger.exception("Unable to determine script directory")
        sys.exit(2)
    logger.debug("dotfile_basepath=%s", dotfile_basepath)

    roles = args.role
    logger.debug("roles=%s", roles)

    try:
        logger.info("Symlinking roles...")
        for role in roles:
            symlink_dir(os.path.join(dotfile_basepath, role), home_dir)

        logger.info("Pruning stale symlinks...")
        prune_links(home_dir, dotfile_basepath, roles)
    except OSError as e:
        logger.error(e.strerror)
        sys.exit(3)
    except Exception as e:
        logger.error(str(e))
        sys.exit(3)
    logger.info("Done!")


def safe_mkdir(path):
    logger.debug("mkdir(%s)", path)
    try:
        path_exists = os.path.lexists(path)
        if path_exists and not os.path.isdir(path):
            raise RuntimeError('Not overwriting existing file')
        elif not path_exists:
            logger.info("MKDIR %s", path)
            os.mkdir(path)
    except Exception as e:
        raise RuntimeError("Could not create directory '{}': {}".format(
            path, e))


def safe_symlink(src, dest):
    """Creates a symlink named `dest` that points to `src`"""
    logger.debug("symlink(src=%s, dest=%s)", src, dest)
    try:
        dest_path_exists = os.path.lexists(dest)
        if dest_path_exists and not os.path.islink(dest):
            raise RuntimeError('Not overwriting existing file')
        elif dest_path_exists and os.readlink(dest) == src:
            return  # Symlink already exists
        elif dest_path_exists:
            logger.info("RM %s", dest)
            os.remove(dest)  # Need to re-create the symlink
        logger.info("LN %s -> %s", src, dest)
        os.symlink(src, dest)
    except Exception as e:
        raise RuntimeError("Could not create symlink '{}': {}".format(
            dest, e))


def safe_remove_symlink(path):
    """Removes the file at the specified path"""
    logger.info("RM %s", path)
    try:
        os.remove(path)
    except OSError as e:
        raise RuntimeError("Could not remove symlink '{}': {}".format(
            path, e.strerror))


def symlink_dir(source_dir, dest_dir):
    for fname in os.listdir(source_dir):
        src_path = os.path.join(source_dir, fname)
        dest_path = os.path.join(dest_dir, fname)
        if os.path.isdir(src_path):
            safe_mkdir(dest_path)
            symlink_dir(src_path, dest_path)
        elif fname != '.keep':
            safe_symlink(src_path, dest_path)


def prune_links(path, dotfile_basepath, expected_roles=None):
    """
    Recursively search `path` looking for dotfile symlinks and
    removing them.
    """
    dotfile_basepath += '/'  # Ensure ends with a '/'
    for root, dirs, files in os.walk(path):
        file_paths = (os.path.join(root, f) for f in files)
        symlink_paths = (fp for fp in file_paths if os.path.islink(fp))
        for symlink_path in symlink_paths:
            link_target = os.readlink(symlink_path)
            if not link_target.startswith(dotfile_basepath):
                continue

            if not os.path.exists(link_target):
                # Remove stale links
                safe_remove_symlink(symlink_path)
            elif expected_roles is not None:
                # Remove links to roles no longer wanted
                role, _ = link_target[len(dotfile_basepath):].split(
                    os.path.sep, 1)
                if role not in expected_roles:
                    safe_remove_symlink(symlink_path)


if __name__ == '__main__':
    main()


# vim:set ts=4 sw=4 expandtab:
