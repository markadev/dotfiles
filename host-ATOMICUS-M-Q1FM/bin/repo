#!/usr/bin/env python3

import argparse
import os
from io import StringIO
from subprocess import check_call, Popen, PIPE


class Repo(object):
    def __init__(self, url=None, trunk=None):
        self.url = url
        self.trunk = trunk

    @property
    def name(self):
        return os.path.splitext(os.path.basename(self.url))[0]


REPOS = [
    Repo(url='git@github.com:Cloudlock/ccs-client-library.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/continuous-integration.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/csf-afw.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-api.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-ctr.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-cxf.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-dev-api.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-e2e.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-enterprise-api.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-external-services.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-metrics.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/csf-platform-aws.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-box.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-dropbox.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-google.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-office365.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-okta.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-onelogin.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-opendns.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-salesforce.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-servicenow.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-slack.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-spark.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-platform-vm.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-policy-service.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/csf-services.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/csf-threat.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-uba.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-user.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/csf-webapp.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/director.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/event-pipeline-client.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/event-pipeline-consumer.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/fedramp-automation.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/gatekeeper.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/keyserver-proxy.git', trunk='master'),
    Repo(url='git@github.com:Cloudlock/platform-admin.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/platform-core.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/platform-ops.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/selective-encryption.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/svc-incidents.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/svc-metrics.git', trunk='develop'),
    Repo(url='git@github.com:Cloudlock/svc-workflows.git', trunk='develop'),
]


def run(cmd, **kwargs):
    p = Popen(cmd, **kwargs)
    p.wait()
    if p.returncode != 0:
        raise RuntimeError('Command failed')


def capture_run(cmd, **kwargs):
    p = Popen(cmd, stdout=PIPE, **kwargs)
    stdout_data, _ = p.communicate()
    if p.returncode != 0:
        raise RuntimeError('Command failed')
    return stdout_data


def git_fetch(repo_dir):
    print("Fetching {}...".format(repo_dir))
    run(['git', 'fetch', '--all'], cwd=repo_dir)
    run(['git', 'submodule', 'foreach', '--recursive', 'git fetch --all'], cwd=repo_dir)


def git_clone(repo_url, dest_dir):
    os.mkdir(dest_dir)
    run(['git', 'clone', repo_url, dest_dir])
    run(['git', 'submodule', 'init'], cwd=dest_dir)
    run(['git', 'submodule', 'update'], cwd=dest_dir)


def git_pull(repo_dir):
    print("Updating {}...".format(repo_dir))
    run(['git', 'pull', '--recurse-submodules=yes'], cwd=repo_dir)
    run(['git', 'submodule', 'update'], cwd=repo_dir)


def git_status(repo_dir):
    cmd_out = StringIO(capture_run(['git', 'status', '--branch', '-s', '--porcelain'],
        cwd=repo_dir).decode('UTF-8'))
    result = {
        'branch_name': '???',
        'changes': []
    }
    for line in cmd_out:
        line = line.rstrip()
        if line.startswith('## '):
            branches = line[3:].split('...')
            result['branch_name'] = branches[0]
            if len(branches) > 1:
                result['upstream_branch_name'] = branches[1]
        elif line.startswith('?? '):
            pass  # skip unknown files
        else:
            result['changes'].append({
                'file_name': line[3:],
                'status': line[0:2],
            })
    return result


def selected_repos(args):
    # TODO add filtering based on command line args
    return REPOS


def cmd_fetch(args):
    for repo in selected_repos(args):
        local_dir = os.path.join(args.src_dir, repo.name)
        git_fetch(local_dir)


def cmd_update(args):
    for repo in selected_repos(args):
        local_dir = os.path.join(args.src_dir, repo.name)
        if not os.path.isdir(local_dir):
            git_clone(repo.url, local_dir)
        else:
            git_pull(local_dir)


def cmd_status(args):
    for repo in selected_repos(args):
        repo_name = repo.name
        repo_path = os.path.join(args.src_dir, repo_name)
        if os.path.isdir(repo_path):
            status = git_status(repo_path)
            print("{:30}  <{}>".format(repo_name, status['branch_name']))
            for change in status['changes']:
                print("  {status} {file_name}".format(**change))


def parse_args():
    parser = argparse.ArgumentParser(description='Helper for managing many repos')
    parser.add_argument('--src-dir', default=os.path.join(os.environ['HOME'], 'src'),
        help='Directory where git repos will be stored')

    subparsers = parser.add_subparsers(help='sub-command help')

    # create the parser for the "fetch" subcommand
    parser_fetch = subparsers.add_parser('fetch',
        help='fetch contents from repo remotes')
    parser_fetch.set_defaults(func=cmd_fetch)

    # create the parser for the "status" subcommand
    parser_status = subparsers.add_parser('status',
        help='show the status of repos')
    parser_status.set_defaults(func=cmd_status)

    # create the parser for the "update" subcommand
    parser_update = subparsers.add_parser('update',
        help='update the local repos from the origin')
    parser_update.set_defaults(func=cmd_update)

    return parser.parse_args()


def main():
    args = parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
