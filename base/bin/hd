#!/usr/bin/env python3
# A simple hex dump program

import argparse
import sys
from itertools import chain


byte_to_ascii = b'................................' \
                b' !"#$%&\'()*+,-./0123456789:;<=>?' \
                b'@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_' \
                b'`abcdefghijklmnopqrstuvwxyz{|}~.' \
                b'................................' \
                b'................................' \
                b'................................' \
                b'................................'


def hexdump(fp, args):
    offset = 0
    while True:
        rawdata = fp.read(4096)
        rawdata_len = len(rawdata)
        if rawdata_len == 0:
            break
        for i in range(0, rawdata_len, 16):
            hexdump_line(offset + i, rawdata[i:i+16], args)
        offset += rawdata_len


def hexdump_line(offset, data, args):
    fields = []
    if args.display_offset:
        fields.append("{:08x}:".format(offset))

    if args.display_hex_data:
        hex_data_str = ' '.join(chain(
            ("{:02x}".format(b) for b in data),
            ('  ' for _ in range(16 - len(data)))
        ))
        fields.append(hex_data_str)

    if args.display_ascii_data:
        ascii_str = " <{}>".format(data.translate(
            byte_to_ascii).decode('ascii'))
        fields.append(ascii_str)

    print(' '.join(fields))


def parse_args():
    parser = argparse.ArgumentParser(description='A simple hex dump program')
    parser.add_argument('-c', dest='display_ascii_data', action='store_false',
        help='Suppress printing of data in ASCII form')
    parser.add_argument('-o', dest='display_offset', action='store_false',
        help='Suppress printing of offsets')
    parser.add_argument('-x', dest='display_hex_data', action='store_false',
        help='Suppress printing of hex data')
    parser.add_argument('filename', nargs='+',
        help='Name of the file to dump')
    return parser.parse_args()


def main():
    args = parse_args()
    try:
        for filename in args.filename:
            fp = open(filename, 'rb')
            hexdump(fp, args)
            fp.close()
    except IOError as e:
        sys.exit("{}".format(e))
    except KeyboardInterrupt:
        sys.exit(1)


if __name__ == '__main__':
    main()
