#!/usr/bin/env python

import argparse
import base64
import hashlib
import hmac
import logging
import os
import sys
import warnings
from datetime import datetime
from urllib import quote
from urlparse import parse_qsl, urlparse

import requests


logger = logging.getLogger()


def parse_args():
    parser = argparse.ArgumentParser(description='HTTP requests with S3 authentication')
    parser.add_argument('-d', dest='data', help='data to send in the request body')
    parser.add_argument('-H', dest='headers', action='append', help='HTTP header to add')
    parser.add_argument('-k', dest='noverify', action='store_true', help='skip SSL certificate validation')
    parser.add_argument('-v', dest='verbose', action='store_true', help='increase log output verbosity')
    parser.add_argument('-X', dest='method', default='GET', help='HTTP method to send')
    parser.add_argument('url', nargs=1, help='request URL')
    return parser.parse_args()


# Key derivation functions. See:
# http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python
def sign(key, msg):
    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()

def get_signature_key(key, date_stamp, regionName, serviceName):
    kDate = sign(('AWS4' + key).encode('utf-8'), date_stamp)
    kRegion = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')
    return kSigning


def make_request(method, endpoint, headers=None, data=None, secret_key=None, access_key=None, noverify=False):
    region = 'us-east-1'
    service = 's3'

    url = urlparse(endpoint)
    headers = dict(headers) if headers is not None else dict()

    # Create a date for headers and the credential string
    t = datetime.utcnow()
    amz_date = t.strftime('%Y%m%dT%H%M%SZ')
    date_stamp = t.strftime('%Y%m%d')  # Date w/o time, used in credential scope

    # ************* TASK 1: CREATE A CANONICAL REQUEST *************
    # http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html

    payload_hash = hashlib.sha256(data or b'').hexdigest()

    canonical_uri = url.path or '/'
    canonical_querystring = '&'.join("{}={}".format(quote(kv[0]), quote(kv[1]))
        for kv in sorted(parse_qsl(url.query, keep_blank_values=True)))

    # Step 4: Create the canonical headers. Header names must be trimmed
    # and lowercase, and sorted in code point order from low to high.
    # Note that there is a trailing \n.
    canonical_headers = 'host:' + url.netloc + '\n' + \
        'x-amz-content-sha256:' + payload_hash + '\n' + \
        'x-amz-date:' + amz_date + '\n'
    signed_headers = 'host;x-amz-content-sha256;x-amz-date'

    canonical_request = '\n'.join(
        (method, canonical_uri, canonical_querystring, canonical_headers, signed_headers, payload_hash))


    # ************* TASK 2: CREATE THE STRING TO SIGN*************
    # Match the algorithm to the hashing algorithm you use, either SHA-1 or
    # SHA-256 (recommended)
    algorithm = 'AWS4-HMAC-SHA256'
    credential_scope = date_stamp + '/' + region + '/' + service + '/' + 'aws4_request'
    string_to_sign = '\n'.join(
        (algorithm, amz_date, credential_scope, hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()))


    # ************* TASK 3: CALCULATE THE SIGNATURE *************
    # Create the signing key using the function defined above.
    signing_key = get_signature_key(secret_key, date_stamp, region, service)

    # Sign the string_to_sign using the signing_key
    signature = hmac.new(signing_key, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()


    # ************* TASK 4: ADD SIGNING INFORMATION TO THE REQUEST *************
    # Put the signature information in a header named Authorization.
    authorization_header = algorithm + ' ' + \
        'Credential=' + access_key + '/' + credential_scope + ', ' + \
        'SignedHeaders=' + signed_headers + ', ' + \
        'Signature=' + signature

    # Note: The 'host' header will be added automatically by the HTTP library
    headers.update({
        'Authorization': authorization_header,
        'X-Amz-Date': amz_date,
        'X-Amz-Content-SHA256': payload_hash,
    })
    if data is not None:
        headers['Content-MD5'] = base64.b64encode(hashlib.md5(data).digest()).decode('utf-8')

    # ************* SEND THE REQUEST *************
    logger.info("* --- REQUEST ---")
    logger.info("> %s %s", method, url.geturl())
    for hk in sorted(headers.keys()):
        logger.info("> %s: %s", hk, headers[hk])
    logger.info(">")

    rsp = requests.request(method, url.geturl(), data=data, headers=headers, verify=not noverify, allow_redirects=False)
    logger.info("* --- RESPONSE ---")
    logger.info("< %s %s", rsp.status_code, rsp.reason)
    for hk in sorted(rsp.headers):
        logger.info("< %s: %s", hk, rsp.headers[hk])
    logger.info("<")
    return rsp


def main():
    warnings.filterwarnings('ignore', module='urllib3\.connectionpool')
    try:
        args = parse_args()
        logging.basicConfig(format="%(message)s",
            level=logging.INFO if args.verbose else logging.WARN)

        access_key = os.environ.get('AWS_ACCESS_KEY_ID')
        secret_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
        if access_key is None or secret_key is None:
            logger.error('No access key is available.')
            sys.exit(1)

        headers = {}
        if args.headers:
            headers = dict(((kv[0].strip(), kv[1].strip()) for kv in (h.split(':') for h in args.headers)))

        data = None
        if args.data:
            if args.data == '@-':
                data = sys.stdin.read()
            elif args.data.startswith('@'):
                with open(args.data[1:], 'rb') as fp:
                    data = fp.read()
            else:
                data = args.data.encode('utf-8')

        rsp = make_request(args.method, args.url[0], headers=headers, data=data,
                           access_key=access_key, secret_key=secret_key, noverify=args.noverify)
        sys.stdout.write(rsp.content)
    except KeyboardInterrupt:
        logger.error("interrupted!")
        sys.exit(2)
    except (IOError, requests.exceptions.RequestException) as e:
        logger.error("Exception: %s", e)
        sys.exit(3)


if __name__ == '__main__':
    main()
